name: Exploring Concurrency

on:
#   push
    # schedule:
    #     - cron: "*/1 * * * *" #Can use Crontab Guru to help with expression
    workflow_dispatch: #This will allow you to manually trigger workflows. The button will appear in github actions

env:
  CONTAINER_REGISTRY: docker.io
  IMAGE_NAME: github-actions-nginx

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Docker Build
      run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest 

    - name: Docker Login
      run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} 

    - name: Docker Publish
      run: echo docker push ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/imageName:latest
    
  deploy:
    # timeout-minutes: 1 # Can be used in job level. Cancel job if not done in 1 minute
    needs: docker
    concurrency:
      group: production-deployment #just a name
      # cancel-in-progress: true #Cancels any job or workflows in the same concurrency group if TRUE. Cancel existing workflow/job and run a new one
      cancel-in-progress: false # Does not cancel the current job/workflow and will wait till it is finished before doing this job
    runs-on: ubuntu-latest
    steps:
    - name: Docker run
      timeout-minutes: 1  # Cancel step if not done within 1 minute
      run: |
        echo docker run -d -p 8080:80 ${{ env.CONTAINER_REGISTRY }}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
        sleep 6000s